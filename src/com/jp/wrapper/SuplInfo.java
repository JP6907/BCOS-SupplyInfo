package com.jp.wrapper;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import org.bcos.web3j.abi.EventEncoder;
import org.bcos.web3j.abi.EventValues;
import org.bcos.web3j.abi.FunctionEncoder;
import org.bcos.web3j.abi.TypeReference;
import org.bcos.web3j.abi.datatypes.Event;
import org.bcos.web3j.abi.datatypes.Function;
import org.bcos.web3j.abi.datatypes.Type;
import org.bcos.web3j.abi.datatypes.Utf8String;
import org.bcos.web3j.abi.datatypes.generated.Int256;
import org.bcos.web3j.abi.datatypes.generated.Uint256;
import org.bcos.web3j.crypto.Credentials;
import org.bcos.web3j.protocol.Web3j;
import org.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.bcos.web3j.protocol.core.methods.request.EthFilter;
import org.bcos.web3j.protocol.core.methods.response.Log;
import org.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.bcos.web3j.tx.Contract;
import org.bcos.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.bcos.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version none.
 */
public final class SuplInfo extends Contract {
    private static final String BINARY = "";

    private SuplInfo(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private SuplInfo(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<InitIouLimitDataEventResponse> getInitIouLimitDataEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("InitIouLimitData", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<InitIouLimitDataEventResponse> responses = new ArrayList<InitIouLimitDataEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            InitIouLimitDataEventResponse typedResponse = new InitIouLimitDataEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<InitIouLimitDataEventResponse> initIouLimitDataEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("InitIouLimitData", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, InitIouLimitDataEventResponse>() {
            @Override
            public InitIouLimitDataEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                InitIouLimitDataEventResponse typedResponse = new InitIouLimitDataEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<SetIouLimitEventResponse> getSetIouLimitEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SetIouLimit", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<SetIouLimitEventResponse> responses = new ArrayList<SetIouLimitEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            SetIouLimitEventResponse typedResponse = new SetIouLimitEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SetIouLimitEventResponse> setIouLimitEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SetIouLimit", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SetIouLimitEventResponse>() {
            @Override
            public SetIouLimitEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                SetIouLimitEventResponse typedResponse = new SetIouLimitEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<IouRecycleEventResponse> getIouRecycleEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("IouRecycle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<IouRecycleEventResponse> responses = new ArrayList<IouRecycleEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            IouRecycleEventResponse typedResponse = new IouRecycleEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IouRecycleEventResponse> iouRecycleEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("IouRecycle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, IouRecycleEventResponse>() {
            @Override
            public IouRecycleEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                IouRecycleEventResponse typedResponse = new IouRecycleEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<AddIouEventResponse> getAddIouEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddIou", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddIouEventResponse> responses = new ArrayList<AddIouEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddIouEventResponse typedResponse = new AddIouEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddIouEventResponse> addIouEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddIou", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddIouEventResponse>() {
            @Override
            public AddIouEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddIouEventResponse typedResponse = new AddIouEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<AddTransactionEventResponse> getAddTransactionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddTransactionEventResponse> responses = new ArrayList<AddTransactionEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddTransactionEventResponse typedResponse = new AddTransactionEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddTransactionEventResponse> addTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddTransaction", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddTransactionEventResponse>() {
            @Override
            public AddTransactionEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddTransactionEventResponse typedResponse = new AddTransactionEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<UpdateTransStatusEventResponse> getUpdateTransStatusEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UpdateTransStatus", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UpdateTransStatusEventResponse> responses = new ArrayList<UpdateTransStatusEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UpdateTransStatusEventResponse typedResponse = new UpdateTransStatusEventResponse();
            typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdateTransStatusEventResponse> updateTransStatusEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UpdateTransStatus", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UpdateTransStatusEventResponse>() {
            @Override
            public UpdateTransStatusEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UpdateTransStatusEventResponse typedResponse = new UpdateTransStatusEventResponse();
                typedResponse._json = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<AddTransactionResultEventResponse> getAddTransactionResultEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddTransactionResult", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddTransactionResultEventResponse> responses = new ArrayList<AddTransactionResultEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddTransactionResultEventResponse typedResponse = new AddTransactionResultEventResponse();
            typedResponse._code = (Int256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddTransactionResultEventResponse> addTransactionResultEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddTransactionResult", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddTransactionResultEventResponse>() {
            @Override
            public AddTransactionResultEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddTransactionResultEventResponse typedResponse = new AddTransactionResultEventResponse();
                typedResponse._code = (Int256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<UpdateTransStatusResultEventResponse> getUpdateTransStatusResultEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UpdateTransStatusResult", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UpdateTransStatusResultEventResponse> responses = new ArrayList<UpdateTransStatusResultEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UpdateTransStatusResultEventResponse typedResponse = new UpdateTransStatusResultEventResponse();
            typedResponse._code = (Int256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdateTransStatusResultEventResponse> updateTransStatusResultEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UpdateTransStatusResult", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UpdateTransStatusResultEventResponse>() {
            @Override
            public UpdateTransStatusResultEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UpdateTransStatusResultEventResponse typedResponse = new UpdateTransStatusResultEventResponse();
                typedResponse._code = (Int256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Future<Utf8String> getVersion() {
        Function function = new Function("getVersion", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> queryTransByConId(Utf8String conID) {
        Function function = new Function("queryTransByConId", 
                Arrays.<Type>asList(conID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getTransLength() {
        Function function = new Function("getTransLength", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> initIouLimitData(Utf8String _orgID, Utf8String _orgName, Int256 _iouLimit, Utf8String _createTime, Utf8String _updateTime) {
        Function function = new Function("initIouLimitData", Arrays.<Type>asList(_orgID, _orgName, _iouLimit, _createTime, _updateTime), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> updateTransStatus(Utf8String conID, Utf8String status) {
        Function function = new Function("updateTransStatus", Arrays.<Type>asList(conID, status), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getIouLimit(Utf8String orgID) {
        Function function = new Function("getIouLimit", 
                Arrays.<Type>asList(orgID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> iouRecycle(Utf8String iouId, Int256 amount) {
        Function function = new Function("iouRecycle", Arrays.<Type>asList(iouId, amount), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> setIouLimit(Utf8String orgID, Int256 amount) {
        Function function = new Function("setIouLimit", Arrays.<Type>asList(orgID, amount), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getIouList(Uint256 _pageNo, Uint256 _pageSize) {
        Function function = new Function("getIouList", 
                Arrays.<Type>asList(_pageNo, _pageSize), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getIouLength() {
        Function function = new Function("getIouLength", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addTransaction(Utf8String _conID, Utf8String _saleOrg, Utf8String _buyOrg, Utf8String _transType, Int256 _amount, Utf8String _conHash, Utf8String _status, Utf8String _transTime, Utf8String _updateTime) {
        Function function = new Function("addTransaction", Arrays.<Type>asList(_conID, _saleOrg, _buyOrg, _transType, _amount, _conHash, _status, _transTime, _updateTime), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Int256> getNumber() {
        Function function = new Function("getNumber", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

//    public Future<Utf8String> getContractName() {
//        Function function = new Function("getContractName", 
//                Arrays.<Type>asList(), 
//                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
//        return executeCallSingleValueReturnAsync(function);
//    }

    public Future<Utf8String> queryTransList(Uint256 _pageNo, Uint256 _pageSize) {
        Function function = new Function("queryTransList", 
                Arrays.<Type>asList(_pageNo, _pageSize), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<SuplInfo> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Int256 _number, Utf8String _version) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_number, _version));
        return deployAsync(SuplInfo.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Future<SuplInfo> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Int256 _number, Utf8String _version) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_number, _version));
        return deployAsync(SuplInfo.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static SuplInfo load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SuplInfo(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static SuplInfo load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SuplInfo(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class InitIouLimitDataEventResponse {
        public Utf8String _json;
    }

    public static class SetIouLimitEventResponse {
        public Utf8String _json;
    }

    public static class IouRecycleEventResponse {
        public Utf8String _json;
    }

    public static class AddIouEventResponse {
        public Utf8String _json;
    }

    public static class AddTransactionEventResponse {
        public Utf8String _json;
    }

    public static class UpdateTransStatusEventResponse {
        public Utf8String _json;
    }

    public static class AddTransactionResultEventResponse {
        public Int256 _code;
    }

    public static class UpdateTransStatusResultEventResponse {
        public Int256 _code;
    }
}
